*チュートリアル2

**git のオブジェクトデータベース
  $ mkdir test-project         // 
  $ cd test-project            //
  $ git init                   // ローカルリポジトリを作成する
  Initialized empty Git repository in .git
  $ echo 'hello world' > file.txt
  $ git add .
  $ git commit -a -m "initial commit"
  Created initall commit ......................
   create mode 100644 file.txt
                               // 40桁の16進数が表示される
                               // オブジェクトのコンテンツのSHA1ハッシュ値
  $ echo 'hello world!' >! file.txt
  $ git commit -a -m "add emphasis"
  Created commit ..........................

  $ git cat-file -t .....      // オブジェクトのタイプを調べる
  commit
  $ git cat-file commit .....  // 内容を見る
  tree ....................    // tree は，tree, blob でファイル階層を表わす
  authoer .............
  commiter ...........
  
  intital commit
  $ git ls-tree .......        
  100644 blob .................. file.txt
                               // tree に 1つの blob オブジェクトが含まれている
  $ git cat-file blob ......
                               // blob オブジェクトの内容が見られる
  $ ls -d .git/objects
  .git/objects/                // SHA1 値ごとに格納されている
  $ cat .git/HEAD
  ref: refs/heads/master       // どのブランチに居るのか
  $ cat .git/refs/heads/master
  ................................
  $ git cat-file -t ......
  commit
  $ git cat-file commit .....
  tree .....                   // 最後のコミット
  parent ..................    // 前のコミット
  author ..............
  commiter ..................

  add emphasis
  
  複数親を持つコミットは，マージを指している．

**索引ファイル
  $ echo 'hello world, again' >> file.txt
  $ git diff
  diff --git a/file.txt b/file.txt
  index a042389..513feba 100644
  --- a/file.txt
  +++ b/file.txt
  @@ -1 +1,2 @@
   hello world!
  +hello world, again
  $ git add file.txt
  $ git diff                   // 索引ファイルとdiff している
  $ git diff HEAD              // オブジェクトとdiff している
  diff --git a/file.txt b/file.txt
  index a042389..513feba 100644
  --- a/file.txt
  +++ b/file.txt
  @@ -1 +1,2 @@
   hello world!
  +hello world, again
  $ git ls-files --starge
  10044 .................. 0 file.txt
  $ git cat-file -t ......
  blob
  $ git cat-file blob .......
  hello world!
  hello world, again
  $ echo 'again?' >> file.txt
  $ git diff                   // 索引ファイルとdiff している
  diff --git a/file.txt b/file.txt
  index 513feba..ba3da7b 100644
  --- a/file.txt
  +++ b/file.txt
  @@ -1,2 +1,3 @@
   hello world!
   hello world, again
  +again?
  $ git diff HEAD              // コミット済みとdiff している
  diff --git a/file.txt b/file.txt
  index a042389..ba3da7b 100644
  --- a/file.txt
  +++ b/file.txt
  @@ -1 +1,3 @@
   hello world!
  +hello world, again
  +again?
  $ git diff --cached          // 索引ファイルと コミット済みとdiff している
  diff --git a/file.txt b/file.txt
  index a042389..513feba 100644
  --- a/file.txt
  +++ b/file.txt
  @@ -1 +1,2 @@
   hello world!
  +hello world, again
  $ git commit -m "repeat"     // add された分しかcommit しない
  $ git diff HEAD              // コミット済みとdiff している
  $ echo "goodbye, world" > closing.txt
  $ git add closing.txt        // 索引ファイルに追加
  $ git ls-files --starget
  100644 .................... 0 closing.txt
  100644 .................... 0 file.txt
  $ git cat-file blob ....
  goodbye, world
  $ git status                 // 状況確認
  # On branch master
  # Changes to be committed:
  #   (use "git reset HEAD <file>..." to unstage)
  #
  #       new file:   closing.txt
  #
  # Changed but not updated:
  #   (use "git add <file>..." to update what will be committed)
  #
  #       modified:   file.txt
  #

**その次は何？
